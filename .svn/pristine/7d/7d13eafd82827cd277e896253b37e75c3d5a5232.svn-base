using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Sidewalk.Logic.Database;
using System.Data.SqlClient;
using System.Data;
using Sidewalk.Logic.Caching;
using AutoMapper;

namespace Sidewalk.Logic
{
    public class AffidavitLogic
    {
        log4net.ILog Log = log4net.LogManager.GetLogger(typeof(AffidavitLogic));
        SWPostEntities context = new SWPostEntities();
        public AffidavitLogic()
        {
            context.Configuration.LazyLoadingEnabled = false;
            context.Configuration.ProxyCreationEnabled = false;
        }

        /// <summary>
        /// this method will get list of affidavit
        /// </summary>
        /// <returns></returns>
        public List<sw_posting> GetAffidavitList()
        {
            List<sw_posting> result = new List<sw_posting>();
            try
            {
                using (SqlConnection con = new SqlConnection(ConnectionHelper.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("getAffidavitList", con))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        con.Open();
                        SqlDataReader dataReader = cmd.ExecuteReader();
                        if (dataReader.HasRows)
                        {
                            while (dataReader.Read())
                            {
                                sw_posting affidavit = new sw_posting();
                                affidavit.aff_no = String.IsNullOrEmpty(dataReader["aff_no"].ToString()) ? 0 : int.Parse(dataReader["aff_no"].ToString());
                                affidavit.NEW_AFF = dataReader["NEW_AFF"].ToString();
                                affidavit.qtr_sec = dataReader["qtr_sec"].ToString();
                                affidavit.map_id = dataReader["map_id"].ToString();
                                affidavit.post_dt = String.IsNullOrEmpty(dataReader["post_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["post_dt"].ToString());// DateTime.Parse(dataReader["post_dt"].ToString());
                                affidavit.acct_period = String.IsNullOrEmpty(dataReader["acct_period"].ToString()) ? 0 : int.Parse(dataReader["acct_period"].ToString());
                                affidavit.property_id = dataReader["property_id"].ToString();
                                affidavit.property_id2 = dataReader["property_id2"].ToString();
                                affidavit.property_desc = dataReader["property_desc"].ToString();
                                affidavit.aff_status = String.IsNullOrEmpty(dataReader["aff_status"].ToString()) ? 0 : int.Parse(dataReader["aff_status"].ToString());
                                affidavit.owner_name = dataReader["owner_name"].ToString();
                                affidavit.attn1 = dataReader["attn1"].ToString();
                                affidavit.attn2 = dataReader["attn2"].ToString();
                                affidavit.st_no = dataReader["st_no"].ToString();
                                affidavit.district = dataReader["district"].ToString();
                                affidavit.st_name = dataReader["st_name"].ToString();
                                affidavit.designator = dataReader["designator"].ToString();
                                affidavit.city = dataReader["city"].ToString();
                                affidavit.zip = dataReader["zip"].ToString();
                                affidavit.inspector_no = String.IsNullOrEmpty(dataReader["inspector_no"].ToString()) ? 0 : int.Parse(dataReader["inspector_no"].ToString());
                                affidavit.city_owned_flag = dataReader["city_owned_flag"].ToString();
                                affidavit.owner_resident_flag = dataReader["owner_resident_flag"].ToString();
                                affidavit.service_req_flag = dataReader["service_req_flag"].ToString();
                                affidavit.rep_by_city = dataReader["rep_by_city"].ToString();
                                affidavit.rep_by_owner = dataReader["rep_by_owner"].ToString();
                                affidavit.partial_repair = dataReader["partial_repair"].ToString();
                                affidavit.vacant_lot_flag = dataReader["vacant_lot_flag"].ToString();
                                affidavit.vacant_desc = dataReader["vacant_desc"].ToString();
                                affidavit.repair_dt = String.IsNullOrEmpty(dataReader["repair_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["repair_dt"].ToString());// DateTime.Parse(dataReader["repair_dt"].ToString());
                                affidavit.billed_dt = String.IsNullOrEmpty(dataReader["billed_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["billed_dt"].ToString());// DateTime.Parse(dataReader["billed_dt"].ToString());
                                affidavit.bill_flag = dataReader["bill_flag"].ToString();
                                affidavit.hold_until_dt = String.IsNullOrEmpty(dataReader["hold_until_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["hold_until_dt"].ToString());// DateTime.Parse(dataReader["hold_until_dt"].ToString());
                                affidavit.permit_no = String.IsNullOrEmpty(dataReader["permit_no"].ToString()) ? 0 : int.Parse(dataReader["permit_no"].ToString());
                                affidavit.permit_issued = dataReader["permit_issued"].ToString();
                                affidavit.permit_extended = dataReader["permit_extended"].ToString();
                                affidavit.date_issued = String.IsNullOrEmpty(dataReader["date_issued"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_issued"].ToString());// DateTime.Parse(dataReader["date_issued"].ToString());
                                affidavit.date_expired = String.IsNullOrEmpty(dataReader["date_expired"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_expired"].ToString());// DateTime.Parse(dataReader["date_expired"].ToString());
                                affidavit.contractor = dataReader["contractor"].ToString();
                                affidavit.builder_board_no = dataReader["builder_board_no"].ToString();
                                affidavit.license_no = dataReader["license_no"].ToString();
                                affidavit.date_cancelled = String.IsNullOrEmpty(dataReader["date_cancelled"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_cancelled"].ToString());
                                affidavit.cancelled_by = dataReader["cancelled_by"].ToString();
                                affidavit.status = dataReader["status"].ToString();
                                affidavit.last_action = dataReader["last_action"].ToString();
                                affidavit.date_added = String.IsNullOrEmpty(dataReader["date_added"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_added"].ToString());
                                affidavit.date_updated = String.IsNullOrEmpty(dataReader["date_updated"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_updated"].ToString());
                                affidavit.notes = dataReader["notes"].ToString();
                                affidavit.NEW_AFF = dataReader["NEW_AFF"].ToString();
                                affidavit.NEW_ClearWalk = String.IsNullOrEmpty(dataReader["NEW_ClearWalk"].ToString()) ? false : bool.Parse(dataReader["NEW_ClearWalk"].ToString());
                                affidavit.NEW_RepairDueDate = String.IsNullOrEmpty(dataReader["NEW_RepairDueDate"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["NEW_RepairDueDate"].ToString());
                                affidavit.sent_dt = String.IsNullOrEmpty(dataReader["sent_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["sent_dt"].ToString());
                                result.Add(affidavit);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                result = null;
            }
            return result;
        }

        public List<AffidavitAttachment> GetAffidavitAttachments(string affidavitId)
        {
            List<AffidavitAttachment> result = new List<AffidavitAttachment>();
            try
            {
                long affId = long.Parse(affidavitId);
                result = context.AffidavitAttachment.Where(x => x.AffidavitId == affId).OrderByDescending(x => x.CreatedDate).ToList();
            }
            catch (Exception ex)
            {
            }
            return result;
        }


        public bool DeleteAffidavitAttachment(long attachmentId)
        {
            bool result = false;
            try
            {
                var existingItem = context.AffidavitAttachment.Where(x => x.AttachmentId == attachmentId).FirstOrDefault();
                if (existingItem != null)
                    context.AffidavitAttachment.Remove(existingItem);
                context.SaveChanges();
                result = true;
            }
            catch (Exception ex)
            {
                result = false;
            }
            return result;
        }
        public bool UploadAffidavitAttachment(List<AffidavitAttachment> model)
        {
            bool result = false;
            try
            {
                //foreach (var item in model)
                //{
                //    var existingItem = context.AffidavitAttachment.Where(x => x.AffidavitId == item.AffidavitId).ToList();
                //    if (existingItem != null)
                //        context.AffidavitAttachment.RemoveRange(existingItem);
                //    context.SaveChanges();
                //}
                context.AffidavitAttachment.AddRange(model);
                context.SaveChanges();
                result = true;
            }
            catch (Exception ex)
            {
                result = false;
            }
            return result;
        }

        /// <summary>
        /// this method will get affidavit details of affidavit
        /// </summary>
        /// <param name="affidavitID"></param>
        /// <returns></returns>
        public sw_posting GetAffidavitDetails(string affidavitID)
        {
            sw_posting affidavit = new sw_posting();
            try
            {
                using (SqlConnection con = new SqlConnection(ConnectionHelper.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("getAffidavitDetails", con))
                    {
                        cmd.Parameters.AddWithValue("@affidavitId", SqlDbType.NVarChar).Value = affidavitID;
                        cmd.CommandType = CommandType.StoredProcedure;
                        con.Open();
                        SqlDataReader dataReader = cmd.ExecuteReader();
                        if (dataReader.HasRows)
                        {
                            while (dataReader.Read())
                            {
                                affidavit.aff_no = String.IsNullOrEmpty(dataReader["aff_no"].ToString()) ? 0 : int.Parse(dataReader["aff_no"].ToString());
                                affidavit.NEW_AFF = dataReader["NEW_AFF"].ToString();
                                affidavit.qtr_sec = dataReader["qtr_sec"].ToString();
                                affidavit.InspectorName = dataReader["InspectorName"].ToString();
                                affidavit.PropertyDescription = dataReader["PropertyDescription"].ToString();
                                affidavit.map_id = dataReader["map_id"].ToString();
                                affidavit.post_dt = String.IsNullOrEmpty(dataReader["post_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["post_dt"].ToString());// DateTime.Parse(dataReader["post_dt"].ToString());
                                affidavit.acct_period = String.IsNullOrEmpty(dataReader["acct_period"].ToString()) ? 0 : int.Parse(dataReader["acct_period"].ToString());
                                affidavit.property_id = dataReader["property_id"].ToString();
                                affidavit.property_id2 = dataReader["property_id2"].ToString();
                                affidavit.property_desc = dataReader["property_desc"].ToString();
                                affidavit.aff_status = String.IsNullOrEmpty(dataReader["aff_status"].ToString()) ? 0 : int.Parse(dataReader["aff_status"].ToString());
                                affidavit.owner_name = dataReader["owner_name"].ToString();
                                affidavit.attn1 = dataReader["attn1"].ToString();
                                affidavit.attn2 = dataReader["attn2"].ToString();
                                affidavit.st_no = dataReader["st_no"].ToString();
                                affidavit.district = dataReader["district"].ToString();
                                affidavit.st_name = dataReader["st_name"].ToString();
                                affidavit.designator = dataReader["designator"].ToString();
                                affidavit.city = dataReader["city"].ToString();
                                affidavit.zip = dataReader["zip"].ToString();
                                //affidavit.inspector_no = String.IsNullOrEmpty(dataReader["inspector_no"].ToString()) ? 0 : int.Parse(dataReader["inspector_no"].ToString());
                                affidavit.inspector_name = dataReader["inspector_name"].ToString();
                                affidavit.city_owned_flag = dataReader["city_owned_flag"].ToString();
                                affidavit.owner_resident_flag = dataReader["owner_resident_flag"].ToString();
                                affidavit.service_req_flag = dataReader["service_req_flag"].ToString();
                                affidavit.rep_by_city = dataReader["rep_by_city"].ToString();
                                affidavit.rep_by_owner = dataReader["rep_by_owner"].ToString();
                                affidavit.partial_repair = dataReader["partial_repair"].ToString();
                                affidavit.vacant_lot_flag = dataReader["vacant_lot_flag"].ToString();
                                affidavit.vacant_desc = dataReader["vacant_desc"].ToString();
                                affidavit.repair_dt = String.IsNullOrEmpty(dataReader["repair_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["repair_dt"].ToString());// DateTime.Parse(dataReader["repair_dt"].ToString());
                                affidavit.billed_dt = String.IsNullOrEmpty(dataReader["billed_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["billed_dt"].ToString());// DateTime.Parse(dataReader["billed_dt"].ToString());
                                affidavit.bill_flag = dataReader["bill_flag"].ToString();
                                affidavit.hold_until_dt = String.IsNullOrEmpty(dataReader["hold_until_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["hold_until_dt"].ToString());// DateTime.Parse(dataReader["hold_until_dt"].ToString());
                                affidavit.permit_no = String.IsNullOrEmpty(dataReader["permit_no"].ToString()) ? 0 : int.Parse(dataReader["permit_no"].ToString());
                                affidavit.permit_issued = dataReader["permit_issued"].ToString();
                                affidavit.permit_extended = dataReader["permit_extended"].ToString();
                                affidavit.date_issued = String.IsNullOrEmpty(dataReader["date_issued"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_issued"].ToString());// DateTime.Parse(dataReader["date_issued"].ToString());
                                affidavit.date_expired = String.IsNullOrEmpty(dataReader["date_expired"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_expired"].ToString());// DateTime.Parse(dataReader["date_expired"].ToString());
                                affidavit.contractor = dataReader["contractor"].ToString();
                                affidavit.builder_board_no = dataReader["builder_board_no"].ToString();
                                affidavit.license_no = dataReader["license_no"].ToString();
                                affidavit.date_cancelled = String.IsNullOrEmpty(dataReader["date_cancelled"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_cancelled"].ToString());
                                affidavit.cancelled_by = dataReader["cancelled_by"].ToString();
                                affidavit.status = dataReader["status"].ToString();
                                affidavit.last_action = dataReader["last_action"].ToString();
                                affidavit.date_added = String.IsNullOrEmpty(dataReader["date_added"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_added"].ToString());
                                affidavit.date_updated = String.IsNullOrEmpty(dataReader["date_updated"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_updated"].ToString());
                                affidavit.notes = dataReader["notes"].ToString();
                                affidavit.NEW_AFF = dataReader["NEW_AFF"].ToString();
                                affidavit.NEW_ClearWalk = String.IsNullOrEmpty(dataReader["NEW_ClearWalk"].ToString()) ? false : bool.Parse(dataReader["NEW_ClearWalk"].ToString());
                                affidavit.NEW_RepairDueDate = String.IsNullOrEmpty(dataReader["NEW_RepairDueDate"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["NEW_RepairDueDate"].ToString());
                                affidavit.sent_dt = String.IsNullOrEmpty(dataReader["sent_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["sent_dt"].ToString());
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                affidavit = null;
            }
            return affidavit;
        }
        /// <summary>
        /// this method will be use for search affidavit by keyword
        /// </summary>
        /// <param name="keyword"></param>
        /// <returns></returns>
        public List<sw_posting> GetAffidavitByKeyword(string keyword)
        {
            List<sw_posting> result = new List<sw_posting>();
            try
            {
                using (SqlConnection con = new SqlConnection(ConnectionHelper.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("getAffidavitByKeyword", con))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@keyword", SqlDbType.NVarChar).Value = keyword;
                        con.Open();
                        SqlDataReader dataReader = cmd.ExecuteReader();
                        if (dataReader.HasRows)
                        {
                            while (dataReader.Read())
                            {
                                sw_posting affidavit = new sw_posting();
                                affidavit.aff_no = String.IsNullOrEmpty(dataReader["aff_no"].ToString()) ? 0 : int.Parse(dataReader["aff_no"].ToString());
                                // affidavit.qtr_sec = dataReader["qtr_sec"].ToString();
                                // affidavit.map_id = dataReader["map_id"].ToString();
                                //affidavit.post_dt = String.IsNullOrEmpty(dataReader["post_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["post_dt"].ToString());// DateTime.Parse(dataReader["post_dt"].ToString());
                                //affidavit.acct_period = String.IsNullOrEmpty(dataReader["acct_period"].ToString()) ? 0 : int.Parse(dataReader["acct_period"].ToString());
                                //affidavit.property_id = dataReader["property_id"].ToString();
                                //affidavit.property_id2 = dataReader["property_id2"].ToString();
                                //affidavit.property_desc = dataReader["property_desc"].ToString();
                                //affidavit.aff_status = String.IsNullOrEmpty(dataReader["aff_status"].ToString()) ? 0 : int.Parse(dataReader["aff_status"].ToString());
                                //affidavit.owner_name = dataReader["owner_name"].ToString();
                                //affidavit.attn1 = dataReader["attn1"].ToString();
                                //affidavit.attn2 = dataReader["attn2"].ToString();
                                affidavit.st_no = dataReader["st_no"].ToString();
                                affidavit.district = dataReader["district"].ToString();
                                affidavit.st_name = dataReader["st_name"].ToString();
                                affidavit.designator = dataReader["designator"].ToString();
                                //affidavit.city = dataReader["city"].ToString();
                                //affidavit.zip = dataReader["zip"].ToString();
                                //affidavit.inspector_no = String.IsNullOrEmpty(dataReader["inspector_no"].ToString()) ? 0 : int.Parse(dataReader["inspector_no"].ToString());
                                //affidavit.city_owned_flag = dataReader["city_owned_flag"].ToString();
                                //affidavit.owner_resident_flag = dataReader["owner_resident_flag"].ToString();
                                //affidavit.service_req_flag = dataReader["service_req_flag"].ToString();
                                //affidavit.rep_by_city = dataReader["rep_by_city"].ToString();
                                //affidavit.rep_by_owner = dataReader["rep_by_owner"].ToString();
                                //affidavit.partial_repair = dataReader["partial_repair"].ToString();
                                //affidavit.vacant_lot_flag = dataReader["vacant_lot_flag"].ToString();
                                //affidavit.vacant_desc = dataReader["vacant_desc"].ToString();
                                //affidavit.repair_dt = String.IsNullOrEmpty(dataReader["repair_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["repair_dt"].ToString());// DateTime.Parse(dataReader["repair_dt"].ToString());
                                //affidavit.billed_dt = String.IsNullOrEmpty(dataReader["billed_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["billed_dt"].ToString());// DateTime.Parse(dataReader["billed_dt"].ToString());
                                //affidavit.bill_flag = dataReader["bill_flag"].ToString();
                                //affidavit.hold_until_dt = String.IsNullOrEmpty(dataReader["hold_until_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["hold_until_dt"].ToString());// DateTime.Parse(dataReader["hold_until_dt"].ToString());
                                //affidavit.permit_no = String.IsNullOrEmpty(dataReader["permit_no"].ToString()) ? 0 : int.Parse(dataReader["permit_no"].ToString());
                                //affidavit.permit_issued = dataReader["permit_issued"].ToString();
                                //affidavit.permit_extended = dataReader["permit_extended"].ToString();
                                //affidavit.date_issued = String.IsNullOrEmpty(dataReader["date_issued"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_issued"].ToString());// DateTime.Parse(dataReader["date_issued"].ToString());
                                //affidavit.date_expired = String.IsNullOrEmpty(dataReader["date_expired"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_expired"].ToString());// DateTime.Parse(dataReader["date_expired"].ToString());
                                //affidavit.contractor = dataReader["contractor"].ToString();
                                //affidavit.builder_board_no = dataReader["builder_board_no"].ToString();
                                //affidavit.license_no = dataReader["license_no"].ToString();
                                //affidavit.date_cancelled = String.IsNullOrEmpty(dataReader["date_cancelled"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_cancelled"].ToString());
                                //affidavit.cancelled_by = dataReader["cancelled_by"].ToString();
                                //affidavit.status = dataReader["status"].ToString();
                                //affidavit.last_action = dataReader["last_action"].ToString();
                                //affidavit.date_added = String.IsNullOrEmpty(dataReader["date_added"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_added"].ToString());
                                //affidavit.date_updated = String.IsNullOrEmpty(dataReader["date_updated"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_updated"].ToString());
                                //affidavit.notes = dataReader["notes"].ToString();
                                //affidavit.sent_dt = String.IsNullOrEmpty(dataReader["sent_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["sent_dt"].ToString());
                                result.Add(affidavit);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                result = null;
            }
            return result;
        }

        public List<sw_posting> GetAffidavitByParameters(string affidavitId, string propertyId, string inspectionDate, string fromDate, string toDate)
        {
            string from = fromDate.Split('/')[2] + "-" + fromDate.Split('/')[0] + "-" + fromDate.Split('/')[1];
            string to = toDate.Split('/')[2] + "-" + toDate.Split('/')[0] + "-" + toDate.Split('/')[1];
            List <sw_posting> result = new List<sw_posting>();
            try
            {
                var list = context.getAffidavitByParameter(affidavitId, propertyId, inspectionDate, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty,from,to).ToList();

                result = Mapper.Map<List<getAffidavitByParameter_Result>, List<sw_posting>>(list);

            }
            catch (Exception ex)
            {
                Log.Error(ex);
                result = null;
            }
            return result;
        }
        /// <summary>
        /// this method will be use for search affidavit by keyword
        /// </summary>
        /// <param name="keyword"></param>
        /// <returns></returns>
        public List<sw_posting> GetAffidavitByPropertyKeyword(string keyword)
        {
            List<sw_posting> result = new List<sw_posting>();
            try
            {
                using (SqlConnection con = new SqlConnection(ConnectionHelper.ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("getAffidavitByProperty", con))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@keyword", SqlDbType.NVarChar).Value = keyword;
                        con.Open();
                        SqlDataReader dataReader = cmd.ExecuteReader();
                        if (dataReader.HasRows)
                        {
                            while (dataReader.Read())
                            {
                                sw_posting affidavit = new sw_posting();
                                affidavit.aff_no = String.IsNullOrEmpty(dataReader["aff_no"].ToString()) ? 0 : int.Parse(dataReader["aff_no"].ToString());
                                // affidavit.qtr_sec = dataReader["qtr_sec"].ToString();
                                // affidavit.map_id = dataReader["map_id"].ToString();
                                //affidavit.post_dt = String.IsNullOrEmpty(dataReader["post_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["post_dt"].ToString());// DateTime.Parse(dataReader["post_dt"].ToString());
                                //affidavit.acct_period = String.IsNullOrEmpty(dataReader["acct_period"].ToString()) ? 0 : int.Parse(dataReader["acct_period"].ToString());
                                //affidavit.property_id = dataReader["property_id"].ToString();
                                //affidavit.property_id2 = dataReader["property_id2"].ToString();
                                //affidavit.property_desc = dataReader["property_desc"].ToString();
                                //affidavit.aff_status = String.IsNullOrEmpty(dataReader["aff_status"].ToString()) ? 0 : int.Parse(dataReader["aff_status"].ToString());
                                //affidavit.owner_name = dataReader["owner_name"].ToString();
                                //affidavit.attn1 = dataReader["attn1"].ToString();
                                //affidavit.attn2 = dataReader["attn2"].ToString();
                                affidavit.st_no = dataReader["st_no"].ToString();
                                affidavit.district = dataReader["district"].ToString();
                                affidavit.st_name = dataReader["st_name"].ToString();
                                affidavit.designator = dataReader["designator"].ToString();
                                //affidavit.city = dataReader["city"].ToString();
                                //affidavit.zip = dataReader["zip"].ToString();
                                //affidavit.inspector_no = String.IsNullOrEmpty(dataReader["inspector_no"].ToString()) ? 0 : int.Parse(dataReader["inspector_no"].ToString());
                                //affidavit.city_owned_flag = dataReader["city_owned_flag"].ToString();
                                //affidavit.owner_resident_flag = dataReader["owner_resident_flag"].ToString();
                                //affidavit.service_req_flag = dataReader["service_req_flag"].ToString();
                                //affidavit.rep_by_city = dataReader["rep_by_city"].ToString();
                                //affidavit.rep_by_owner = dataReader["rep_by_owner"].ToString();
                                //affidavit.partial_repair = dataReader["partial_repair"].ToString();
                                //affidavit.vacant_lot_flag = dataReader["vacant_lot_flag"].ToString();
                                //affidavit.vacant_desc = dataReader["vacant_desc"].ToString();
                                //affidavit.repair_dt = String.IsNullOrEmpty(dataReader["repair_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["repair_dt"].ToString());// DateTime.Parse(dataReader["repair_dt"].ToString());
                                //affidavit.billed_dt = String.IsNullOrEmpty(dataReader["billed_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["billed_dt"].ToString());// DateTime.Parse(dataReader["billed_dt"].ToString());
                                //affidavit.bill_flag = dataReader["bill_flag"].ToString();
                                //affidavit.hold_until_dt = String.IsNullOrEmpty(dataReader["hold_until_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["hold_until_dt"].ToString());// DateTime.Parse(dataReader["hold_until_dt"].ToString());
                                //affidavit.permit_no = String.IsNullOrEmpty(dataReader["permit_no"].ToString()) ? 0 : int.Parse(dataReader["permit_no"].ToString());
                                //affidavit.permit_issued = dataReader["permit_issued"].ToString();
                                //affidavit.permit_extended = dataReader["permit_extended"].ToString();
                                //affidavit.date_issued = String.IsNullOrEmpty(dataReader["date_issued"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_issued"].ToString());// DateTime.Parse(dataReader["date_issued"].ToString());
                                //affidavit.date_expired = String.IsNullOrEmpty(dataReader["date_expired"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_expired"].ToString());// DateTime.Parse(dataReader["date_expired"].ToString());
                                //affidavit.contractor = dataReader["contractor"].ToString();
                                //affidavit.builder_board_no = dataReader["builder_board_no"].ToString();
                                //affidavit.license_no = dataReader["license_no"].ToString();
                                //affidavit.date_cancelled = String.IsNullOrEmpty(dataReader["date_cancelled"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_cancelled"].ToString());
                                //affidavit.cancelled_by = dataReader["cancelled_by"].ToString();
                                //affidavit.status = dataReader["status"].ToString();
                                //affidavit.last_action = dataReader["last_action"].ToString();
                                //affidavit.date_added = String.IsNullOrEmpty(dataReader["date_added"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_added"].ToString());
                                //affidavit.date_updated = String.IsNullOrEmpty(dataReader["date_updated"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["date_updated"].ToString());
                                //affidavit.notes = dataReader["notes"].ToString();
                                //affidavit.sent_dt = String.IsNullOrEmpty(dataReader["sent_dt"].ToString()) ? (DateTime?)null : DateTime.Parse(dataReader["sent_dt"].ToString());
                                result.Add(affidavit);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                result = null;
            }
            return result;
        }
    }
}
